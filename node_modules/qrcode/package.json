{
  "name": "qrcode",
  "description": "QRCode / 2d Barcode api with both server side and client side support using canvas",
  "version": "0.2.8",
  "author": {
    "name": "Ryan Day",
    "email": "soldair@gmail.com"
  },
  "keywords": [
    "canvas",
    "qrcode",
    "barcode"
  ],
  "main": "./qrcode.js",
  "homepage": "http://github.com/soldair/node-qrcode",
  "scripts": {
    "pretest": "node build.js",
    "prepublish": "node build.js",
    "test": "tap test/url.js"
  },
  "bin": {
    "qrcode": "./bin/qrcode"
  },
  "dependencies": {
    "canvas": ">= 0.4.3 <=1.0.4",
    "colors": "*",
    "bops": "0.0.6"
  },
  "devDependencies": {
    "express": "2.5.x",
    "browserify": "~2.29.0",
    "uglify-js": "1.2.x",
    "canvasutil": "*",
    "tap": "*"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/soldair/node-qrcode.git"
  },
  "engines": {
    "node": ">=0.2.3"
  },
  "readme": "[![Build Status](https://secure.travis-ci.org/soldair/node-qrcode.png)](http://travis-ci.org/soldair/node-qrcode)\n\n\nnode-qrcode\n=\n\nThis is a server side QR code/2d barcode generator.\n\nIt is an extension of \"QRCode for JavaScript\" which Kazuhiko Arase thankfully MIT licensed.\n\nThe `qrcode-draw.js` can be used  directly as a client side lib if its appended too or included with `lib/qrcode.js`.\n\nTo use this on the server side please `require('qrcode');` =)\n\nExamples\n--------\nA simple server side test...\n\n    var QRCode = require('qrcode');\n    \n    QRCode.toDataURL('i am a pony!',function(err,url){\n        console.log(url);\n    });\n\n\nIn your terminal if you install globally...\n\n\n    qrcode \"hi i want a qrcode\"\n    \n    qrcode \"i like to save qrs to file\" qr.png\n\n\nIn client side HTML...\n\n\n    <!--[if ie]><script type=\"text/javascript\" src=\"/vendors/excanvas/excanvas.js\"></script><![endif]-->\n    <script src=\"/build/qrcode.js\"></script>\n    <canvas id=\"test\"></canvas>\n    <script>\n    \n    var qrcodedraw = new QRCodeLib.QRCodeDraw();\n    \n    qrcodedraw.draw(document.getElementById('test'),\"this text will be in the code!\", function(error,canvas){\n      if(error){\n         return console.log('Error =( ',error);\n      }\n      console.log('success!');\n    });\n    </script>\n\n\nRemember to put `excanvas.js` and `qrcode.js` somewhere where your browser can find them.\n\nServer Side API\n---\n\n    QRCode.draw(text, [optional options], cb(error,canvas));\nReturns a node canvas object see https://github.com/LearnBoost/node-canvas for all of the cool node things you can do. Look up the canvas api for the other cool things.\n    \n    QRCode.toDataURL(text, [optional options], cb(error,dataURL));\nReturns mime image/png data url for the 2d barcode.\n    \n    QRCode.save(path, text, [optional options] , cb(error,written));\nSaves png to the path specified returns bytes written.\n    \n    QRCode.drawText(text, [optional options],cb)\nReturns an ascii representation of the qrcode using unicode characters and ansi control codes for background control.\n    \n    QRCode.drawBitArray(text, [optional options], cb(error,bits,width));\nReturns an array with each value being either 0 light or 1 dark and the width of each row.\nThis is enough info to render a qrcode any way you want. =)\n\n\nOptions\n---------\n\n    errorCorrectLevel\n\nCan be one of the values in `qrcode.errorCorrectLevel`.\nCan be a string. one of `\"minumum\",\"medium\",\"high\",\"max\"`.\nIf `undefined`, defaults to H which is max error correction.\nIf invalid value, defaults to minimum error correction.\n\nclient side api\n---------------\n\n    window.qrcodelib\n\n`qrcodelib.qrcodedraw()` Constructor\n\n    qrcode = new qrcodelib.qrcodedraw()\n    qrcode.draw(canvasElement,text,[optional options],cb);\n\n\nFor quick client side use...\n\n    node test/clientsideserver.js\n    open http://localhost:3031\n\nThe JavaScript is in `test/clientside.html`.\n\nQR code capacity\n---\n\nThis libary can encode a string up to lengths:\n\n- 2953 in error correct level L\n- 2331 in error correct level M\n- 1663 in error correct level Q\n- 1273 in error correct level H\n\nThe default is H. \n\nIt can now be changed in an ugly way that wont be supported for more then another few days if you really need to. Also the default module size at qr version 40 is really too small for the camera on my Nexus 1 and to make it larger i run out of screen to show it. At 40 the barcode scanner even finds random UPC 1d barcodes in the mass of little squares.\nthe default module size cannot be changed through the public api at this time.\n\nInstallation\n--\n\n    npm install qrcode\nTo use qrcode from the command line to save  qrcode images or generate ones you can view in your terminal...\n\n    npm install -g qrcode \n`node-canvas` is a native module and requires dev packages of `cairo` and `pixman` to compile. \n On ubuntu you can install them with `apt-get` and `npm install` will work great.\n  \n\n    sudo apt-get install libpixman-1-dev libcairo2-dev\nIt is my higest priority for this module to use an all `js` png encoder and remove this dep.\n\n\nDependencies\n------------\nThese should be taken care of for you by npm but you should...\n\n    npm install canvas\n\nIf `cairo` gives you trouble and you cannot install `canvas`, checkout the canvas site. I know @tjholowaychuk has setup a way to download and install a version of cairo/pixman for testing.\n\nThe word \"QR Code\" is registered trademark of:\n\nDENSO WAVE INCORPORATED\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/soldair/node-qrcode/issues"
  },
  "_id": "qrcode@0.2.8",
  "_from": "qrcode@0.2.x"
}
